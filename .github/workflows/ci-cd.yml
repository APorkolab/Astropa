name: Astropa CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Backend Pipeline
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    defaults:
      run:
        working-directory: ./backend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Run tests
      run: mvn clean test
    
    - name: Run integration tests
      run: mvn clean verify -Pintegration-test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Code Coverage
      run: mvn jacoco:report
    
    - name: Upload coverage to Codecov
      if: env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test]
    defaults:
      run:
        working-directory: ./backend
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn clean package -DskipTests
    
    - name: Build Docker image
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/backend:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/backend:latest .
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/backend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/backend:latest
    
    - name: Set image output
      id: image
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        echo "image=${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/backend:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Frontend Pipeline
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if frontend directory exists
      run: |
        if [ ! -d "./frontend" ]; then
          echo "Frontend directory not found, skipping frontend tests"
          echo "frontend_exists=false" >> $GITHUB_ENV
        else
          echo "frontend_exists=true" >> $GITHUB_ENV
        fi
    
    - name: Set up Node.js
      if: env.frontend_exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache node modules
      if: env.frontend_exists == 'true'
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      if: env.frontend_exists == 'true'
      run: npm install
    
    - name: Run linting
      if: env.frontend_exists == 'true'
      run: npm run lint
    
    - name: Run unit tests
      if: env.frontend_exists == 'true'
      run: npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless
    
    - name: Upload coverage to Codecov
      if: env.CODECOV_TOKEN != '' && env.frontend_exists == 'true'
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: [security-scan, frontend-test]
    defaults:
      run:
        working-directory: ./frontend
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if frontend directory exists
      run: |
        if [ ! -d "./frontend" ]; then
          echo "Frontend directory not found, skipping frontend build"
          echo "frontend_exists=false" >> $GITHUB_ENV
        else
          echo "frontend_exists=true" >> $GITHUB_ENV
        fi
    
    - name: Set up Node.js
      if: env.frontend_exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache node modules
      if: env.frontend_exists == 'true'
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      if: env.frontend_exists == 'true'
      run: npm install
    
    - name: Build application
      if: env.frontend_exists == 'true'
      run: npm run build:prod
    
    - name: Build Docker image
      if: env.frontend_exists == 'true'
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/frontend:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/frontend:latest .
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request' && env.frontend_exists == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: github.event_name != 'pull_request' && env.frontend_exists == 'true'
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/frontend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/frontend:latest
    
    - name: Set image output
      if: env.frontend_exists == 'true'
      id: image
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        echo "image=${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}/astropa/frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run E2E tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T frontend npm run e2e
    
    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, e2e-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://astropa-staging.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, e2e-tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://astropa.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # kubectl apply -f k8s/production/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke test commands here
    
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release created by GitHub Actions
          
          **Backend Image:** `${{ needs.backend-build.outputs.image }}`
          **Frontend Image:** `${{ needs.frontend-build.outputs.image }}`
        draft: false
        prerelease: false

  # Notifications
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify Slack
      if: always() && env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
