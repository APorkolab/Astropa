apiVersion: apps/v1
kind: Deployment
metadata:
  name: astropa-backend
  namespace: astropa
  labels:
    app: astropa
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: astropa
      component: backend
  template:
    metadata:
      labels:
        app: astropa
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: astropa-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/yourusername/astropa-2/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: astropa-secrets
              key: database-username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: astropa-secrets
              key: database-password
        - name: ASTROPA_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: astropa-secrets
              key: jwt-secret
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: astropa-secrets
              key: redis-password
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: astropa-backend-config
      - name: logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: astropa-backend
  namespace: astropa
  labels:
    app: astropa
    component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: astropa
    component: backend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: astropa-backend
  namespace: astropa
  labels:
    app: astropa
    component: backend

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: astropa-backend-pdb
  namespace: astropa
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: astropa
      component: backend